schema {
  query: Root
  mutation: Mutation
  subscription: Subscription
}

"""This directive allows results to be deferred during execution"""
directive @defer on FIELD

type AccountTransaction {
  accountId: Long!
  creditsAmount: String!
  microCreditsAmount: Long!
  repository: Repository
  repositoryId: Long!
  task: Task
  taskId: Long!
  timestamp: Long!
}

"""An edge in a connection"""
type AccountTransactionEdge {
  """cursor marks a unique position or index into the connection"""
  cursor: String!

  """The item at the end of the edge"""
  node: AccountTransaction
}

"""A connection to a list of items."""
type AccountTransactionsConnection {
  """a list of edges"""
  edges: [AccountTransactionEdge]

  """details about this specific page"""
  pageInfo: PageInfo!
}

type ApiAccessToken {
  creationTimestamp: Long
  maskedToken: String
}

type ArtifactFileInfo {
  path: String!
  size: Long!
}

type Artifacts {
  files: [ArtifactFileInfo]
  format: String
  name: String!
  type: String
}

type BillingSettings {
  accountId: Long!
  billingCreditsLimit: Long!
  billingEmailAddress: String!
  enabled: Boolean!
  invoiceTemplate: String
}

input BillingSettingsInput {
  accountId: ID!
  billingEmailAddress: String!
  clientMutationId: String
  enabled: Boolean!
  invoiceTemplate: String
}

type BillingSettingsPayload {
  clientMutationId: String
  settings: BillingSettings
}

type Build {
  branch: String!
  buildCreatedTimestamp: Long!
  changeIdInRepo: String!
  changeMessage: String
  changeMessageTitle: String
  changeTimestamp: Long!
  checkSuiteId: Long
  clockDurationInSeconds: Long
  durationInSeconds: Long
  id: ID!
  isSenderUserCollaborator: Boolean
  latestGroupTasks: [Task]
  notifications: [Notification]
  pullRequest: Long
  repository: Repository!
  repositoryId: ID!
  senderUserPermissions: String
  status: BuildStatus
  tasks: [Task]
  viewerPermission: PermissionType!
}

input BuildApproveInput {
  buildId: ID!
  clientMutationId: String
}

type BuildApprovePayload {
  build: Build!
  clientMutationId: String
}

input BuildReTriggerInput {
  buildId: ID!
  clientMutationId: String
}

type BuildReTriggerPayload {
  build: Build!
  clientMutationId: String
}

"""Build status."""
enum BuildStatus {
  ABORTED
  COMPLETED
  CREATED
  ERRORED
  EXECUTING
  FAILED
  NEEDS_APPROVAL
  TRIGGERED
}

input BuyComputeCreditsInput {
  accountId: ID!
  amountOfCredits: String!
  clientMutationId: String
  paymentTokenId: String!
}

type BuyComputeCreditsPayload {
  clientMutationId: String
  error: String
  info: GitHubOrganizationInfo
  user: User
}

type DayDate {
  day: Int
  month: Int
  year: Int
}

"""Repository Setting to choose how to decrypt variables."""
enum DecryptEnvironmentVariablesFor {
  EVERYONE
  USERS_WITH_WRITE_PERMISSIONS
}

input GenerateNewAccessTokenInput {
  accountId: ID
  clientMutationId: String
}

type GenerateNewAccessTokenPayload {
  clientMutationId: String
  token: String!
}

type GitHubMarketplacePurchase {
  accountId: Long!
  freeTrialDaysLeft: Int!
  login: String!
  onFreeTrial: Boolean!
  planId: Long!
  planName: String!
  unitCount: Long!
}

type GitHubOrganizationInfo {
  activeUserNames: [String]
  activeUsersAmount: Int!
  apiToken: ApiAccessToken
  balanceInCredits: String!
  billingSettings: BillingSettings
  id: ID!
  name: String!
  purchase: GitHubMarketplacePurchase
  role: String!
  transactions(
    """fetching only nodes after this node (exclusive)"""
    after: String

    """fetching only nodes before this node (exclusive)"""
    before: String

    """fetching only the first certain number of nodes"""
    first: Int

    """fetching only the last certain number of nodes"""
    last: Int
  ): AccountTransactionsConnection
  webhookDeliveries(
    """fetching only nodes after this node (exclusive)"""
    after: String

    """fetching only nodes before this node (exclusive)"""
    before: String

    """fetching only the first certain number of nodes"""
    first: Int

    """fetching only the last certain number of nodes"""
    last: Int
  ): WebhookDeliveriesConnection
  webhookSettings: WebHookSettings
}

"""Long type"""
scalar Long

type MetricsChart {
  dataUnits: String
  points: [TimePoint]
  title: String
}

input MetricsQueryParameters {
  branch: String
  isCommunity: Boolean
  isPR: Boolean
  platform: PlatformType
  status: TaskStatus
  usedComputeCredits: Boolean
}

type Mutation {
  abortTask(input: TaskAbortInput!): TaskAbortPayload
  approve(input: BuildApproveInput!): BuildApprovePayload
  buyComputeCredits(input: BuyComputeCreditsInput!): BuyComputeCreditsPayload
  createBuild(input: RepositoryCreateBuildInput!): RepositoryCreateBuildPayload
  generateNewAccessToken(input: GenerateNewAccessTokenInput!): GenerateNewAccessTokenPayload
  rerun(input: TaskInput!): TaskPayload
  retrigger(input: BuildReTriggerInput!): BuildReTriggerPayload
  saveBillingSettings(input: BillingSettingsInput!): BillingSettingsPayload
  saveSettings(input: RepositorySettingsInput!): RepositorySettingsPayload
  saveWebHookSettings(input: SaveWebHookSettingsInput!): SaveWebHookSettingsPayload
  securedOrganizationVariable(input: OrganizationSecuredVariableInput!): OrganizationSecuredVariablePayload
  securedVariable(input: RepositorySecuredVariableInput!): RepositorySecuredVariablePayload
  trigger(input: TaskTriggerInput!): TaskTriggerPayload
}

type Notification {
  level: NotificationLevel
  link: String
  message: String!
}

"""Notification level."""
enum NotificationLevel {
  ERROR
  INFO
  WARNING
}

input OrganizationSecuredVariableInput {
  clientMutationId: String
  organizationId: ID!
  valueToSecure: String!
}

type OrganizationSecuredVariablePayload {
  clientMutationId: String
  variableName: String!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""User access level."""
enum PermissionType {
  ADMIN
  NONE
  READ
  WRITE
}

"""Task platform."""
enum PlatformType {
  DARWIN
  FREEBSD
  LINUX
  WINDOWS
}

type Repository {
  builds(
    """fetching only nodes after this node (exclusive)"""
    after: String

    """fetching only nodes before this node (exclusive)"""
    before: String

    """branch to fetch builds for"""
    branch: String

    """fetching only the first certain number of nodes"""
    first: Int

    """fetching only the last certain number of nodes"""
    last: Int
  ): RepositoryBuildsConnection
  cloneUrl: String!
  id: ID!
  isPrivate: Boolean!
  lastDefaultBranchBuild: Build
  masterBranch: String!
  metrics(parameters: MetricsQueryParameters): [MetricsChart]
  name: String!
  owner: String!
  settings: RepositorySettings
  viewerPermission: PermissionType
}

"""An edge in a connection"""
type RepositoryBuildEdge {
  """cursor marks a unique position or index into the connection"""
  cursor: String!

  """The item at the end of the edge"""
  node: Build
}

"""A connection to a list of items."""
type RepositoryBuildsConnection {
  """a list of edges"""
  edges: [RepositoryBuildEdge]

  """details about this specific page"""
  pageInfo: PageInfo!
}

input RepositoryCreateBuildInput {
  branch: String!
  clientMutationId: String
  configOverride: String
  repositoryId: ID!
  sha: String
}

type RepositoryCreateBuildPayload {
  build: Build!
  clientMutationId: String
}

input RepositorySecuredVariableInput {
  clientMutationId: String
  repositoryId: ID!
  valueToSecure: String!
}

type RepositorySecuredVariablePayload {
  clientMutationId: String
  variableName: String!
}

type RepositorySettings {
  decryptEnvironmentVariables: DecryptEnvironmentVariablesFor
  needsApproval: Boolean
}

input RepositorySettingsInput {
  clientMutationId: String
  decryptEnvironmentVariables: DecryptEnvironmentVariablesFor
  needsApproval: Boolean
  repositoryId: ID!
}

type RepositorySettingsPayload {
  clientMutationId: String
  settings: RepositorySettings!
}

type Root {
  build(id: ID!): Build
  githubOrganizationInfo(organization: String!): GitHubOrganizationInfo
  githubRepositories(owner: String!): [Repository]
  githubRepository(name: String!, owner: String!): Repository
  repository(id: ID!): Repository
  searchBuilds(SHA: String, repositoryName: String!, repositoryOwner: String!): [Build]
  task(id: ID!): Task
  viewer: User
  webhookDelivery(id: String!): WebHookDelivery
}

input SaveWebHookSettingsInput {
  accountId: ID!
  clientMutationId: String
  webhookURL: String!
}

type SaveWebHookSettingsPayload {
  clientMutationId: String
  error: String
  info: GitHubOrganizationInfo
}

type Subscription {
  build(id: ID!): Build
  repository(id: ID!): Repository
  task(id: ID!): Task
}

type Task {
  allOtherRuns: [Task]
  artifacts: [Artifacts]
  automaticReRun: Boolean!
  build: Build!
  buildId: ID!
  commandLogsTail(name: String!): [String]
  commands: [TaskCommand]
  creationTimestamp: Long!
  dependencies: [Task]
  durationInSeconds: Long!
  executingTimestamp: Long!
  finalStatusTimestamp: Long!
  id: ID!
  labels: [String]
  name: String!
  notifications: [Notification]
  optional: Boolean
  previousRuns: [Task]
  repository: Repository!
  repositoryId: ID!
  requiredPRLabels: [String]
  scheduledTimestamp: Long!
  status: TaskStatus
  statusDurations: [TaskStatusDuration]
  statusTimestamp: Long!
  transaction: AccountTransaction
  uniqueLabels: [String]
  useComputeCredits: Boolean!
  usedComputeCredits: Boolean!
}

input TaskAbortInput {
  clientMutationId: String
  taskId: ID!
}

type TaskAbortPayload {
  abortedTask: Task!
  clientMutationId: String
}

type TaskCommand {
  durationInSeconds: Int
  name: String
  status: TaskCommandStatus
  type: TaskCommandType
}

"""Task Command status."""
enum TaskCommandStatus {
  ABORTED
  EXECUTING
  FAILURE
  SKIPPED
  SUCCESS
  UNDEFINED
}

"""Task Command type."""
enum TaskCommandType {
  CACHE
  CLONE
  EXECUTE_BACKGROUND_SCRIPT
  EXECUTE_SCRIPT
  EXIT
  UPLOAD_CACHE
  WAIT
}

input TaskInput {
  clientMutationId: String
  taskId: ID!
}

type TaskPayload {
  clientMutationId: String
  newTask: Task!
}

"""Task status."""
enum TaskStatus {
  ABORTED
  COMPLETED
  CREATED
  EXECUTING
  FAILED
  PAUSED
  SCHEDULED
  SKIPPED
  TRIGGERED
}

type TaskStatusDuration {
  durationInSeconds: Long!
  status: TaskStatus!
}

input TaskTriggerInput {
  clientMutationId: String
  taskId: ID!
}

type TaskTriggerPayload {
  clientMutationId: String
  task: Task!
}

type TimePoint {
  date: DayDate
  value: Float
}

type User {
  apiToken: ApiAccessToken
  avatarURL: String
  balanceInCredits: String!
  builds(
    """fetching only nodes after this node (exclusive)"""
    after: String

    """fetching only nodes before this node (exclusive)"""
    before: String

    """fetching only the first certain number of nodes"""
    first: Int

    """fetching only the last certain number of nodes"""
    last: Int
  ): UserBuildsConnection
  githubMarketplacePurchase: GitHubMarketplacePurchase
  githubUserId: Long
  githubUserName: String!
  id: ID!
  organizations: [GitHubOrganizationInfo]
  topActiveRepositories: [Repository]
  transactions(
    """fetching only nodes after this node (exclusive)"""
    after: String

    """fetching only nodes before this node (exclusive)"""
    before: String

    """fetching only the first certain number of nodes"""
    first: Int

    """fetching only the last certain number of nodes"""
    last: Int
  ): UserTransactionsConnection
}

"""An edge in a connection"""
type UserBuildEdge {
  """cursor marks a unique position or index into the connection"""
  cursor: String!

  """The item at the end of the edge"""
  node: Build
}

"""A connection to a list of items."""
type UserBuildsConnection {
  """a list of edges"""
  edges: [UserBuildEdge]

  """details about this specific page"""
  pageInfo: PageInfo!
}

"""An edge in a connection"""
type UserTransactionEdge {
  """cursor marks a unique position or index into the connection"""
  cursor: String!

  """The item at the end of the edge"""
  node: AccountTransaction
}

"""A connection to a list of items."""
type UserTransactionsConnection {
  """a list of edges"""
  edges: [UserTransactionEdge]

  """details about this specific page"""
  pageInfo: PageInfo!
}

"""A connection to a list of items."""
type WebhookDeliveriesConnection {
  """a list of edges"""
  edges: [WebHookDeliveryEdge]

  """details about this specific page"""
  pageInfo: PageInfo!
}

type WebHookDelivery {
  accountId: Long!
  id: String!
  payload: WebHookDeliveryPayload!
  repositoryId: Long!
  response: WebHookDeliveryResponse!
  timestamp: Long!
}

"""An edge in a connection"""
type WebHookDeliveryEdge {
  """cursor marks a unique position or index into the connection"""
  cursor: String!

  """The item at the end of the edge"""
  node: WebHookDelivery
}

type WebHookDeliveryPayload {
  action: String!
  data: String!
  event: String!
}

type WebHookDeliveryResponse {
  data: String!
  duration: Long!
  status: Int!
}

type WebHookSettings {
  webhookURL: String
}

