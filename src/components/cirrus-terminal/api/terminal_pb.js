// source: terminal.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Data', null, global);
goog.exportSymbol('proto.Error', null, global);
goog.exportSymbol('proto.GuestTerminalRequest', null, global);
goog.exportSymbol('proto.GuestTerminalRequest.Hello', null, global);
goog.exportSymbol('proto.GuestTerminalRequest.OperationCase', null, global);
goog.exportSymbol('proto.GuestTerminalResponse', null, global);
goog.exportSymbol('proto.GuestTerminalResponse.OperationCase', null, global);
goog.exportSymbol('proto.HostControlRequest', null, global);
goog.exportSymbol('proto.HostControlRequest.Hello', null, global);
goog.exportSymbol('proto.HostControlRequest.OperationCase', null, global);
goog.exportSymbol('proto.HostControlResponse', null, global);
goog.exportSymbol('proto.HostControlResponse.DataChannelRequest', null, global);
goog.exportSymbol('proto.HostControlResponse.Hello', null, global);
goog.exportSymbol('proto.HostControlResponse.OperationCase', null, global);
goog.exportSymbol('proto.HostDataRequest', null, global);
goog.exportSymbol('proto.HostDataRequest.Hello', null, global);
goog.exportSymbol('proto.HostDataRequest.OperationCase', null, global);
goog.exportSymbol('proto.HostDataResponse', null, global);
goog.exportSymbol('proto.HostDataResponse.OperationCase', null, global);
goog.exportSymbol('proto.TerminalDimensions', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GuestTerminalRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.GuestTerminalRequest.oneofGroups_);
};
goog.inherits(proto.GuestTerminalRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GuestTerminalRequest.displayName = 'proto.GuestTerminalRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GuestTerminalRequest.Hello = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GuestTerminalRequest.Hello, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GuestTerminalRequest.Hello.displayName = 'proto.GuestTerminalRequest.Hello';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GuestTerminalResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.GuestTerminalResponse.oneofGroups_);
};
goog.inherits(proto.GuestTerminalResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GuestTerminalResponse.displayName = 'proto.GuestTerminalResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HostControlRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.HostControlRequest.oneofGroups_);
};
goog.inherits(proto.HostControlRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HostControlRequest.displayName = 'proto.HostControlRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HostControlRequest.Hello = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HostControlRequest.Hello, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HostControlRequest.Hello.displayName = 'proto.HostControlRequest.Hello';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HostControlResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.HostControlResponse.oneofGroups_);
};
goog.inherits(proto.HostControlResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HostControlResponse.displayName = 'proto.HostControlResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HostControlResponse.Hello = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HostControlResponse.Hello, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HostControlResponse.Hello.displayName = 'proto.HostControlResponse.Hello';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HostControlResponse.DataChannelRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HostControlResponse.DataChannelRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HostControlResponse.DataChannelRequest.displayName = 'proto.HostControlResponse.DataChannelRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HostDataRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.HostDataRequest.oneofGroups_);
};
goog.inherits(proto.HostDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HostDataRequest.displayName = 'proto.HostDataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HostDataRequest.Hello = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.HostDataRequest.Hello, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HostDataRequest.Hello.displayName = 'proto.HostDataRequest.Hello';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.HostDataResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.HostDataResponse.oneofGroups_);
};
goog.inherits(proto.HostDataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.HostDataResponse.displayName = 'proto.HostDataResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TerminalDimensions = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TerminalDimensions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TerminalDimensions.displayName = 'proto.TerminalDimensions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Data.displayName = 'proto.Data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Error = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Error.displayName = 'proto.Error';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.GuestTerminalRequest.oneofGroups_ = [[1, 2, 3]];

/**
 * @enum {number}
 */
proto.GuestTerminalRequest.OperationCase = {
  OPERATION_NOT_SET: 0,
  HELLO: 1,
  CHANGE_DIMENSIONS: 2,
  INPUT: 3,
};

/**
 * @return {proto.GuestTerminalRequest.OperationCase}
 */
proto.GuestTerminalRequest.prototype.getOperationCase = function () {
  return /** @type {proto.GuestTerminalRequest.OperationCase} */ (
    jspb.Message.computeOneofCase(this, proto.GuestTerminalRequest.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.GuestTerminalRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.GuestTerminalRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.GuestTerminalRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.GuestTerminalRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        hello: (f = msg.getHello()) && proto.GuestTerminalRequest.Hello.toObject(includeInstance, f),
        changeDimensions: (f = msg.getChangeDimensions()) && proto.TerminalDimensions.toObject(includeInstance, f),
        input: (f = msg.getInput()) && proto.Data.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GuestTerminalRequest}
 */
proto.GuestTerminalRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GuestTerminalRequest();
  return proto.GuestTerminalRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GuestTerminalRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GuestTerminalRequest}
 */
proto.GuestTerminalRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.GuestTerminalRequest.Hello();
        reader.readMessage(value, proto.GuestTerminalRequest.Hello.deserializeBinaryFromReader);
        msg.setHello(value);
        break;
      case 2:
        var value = new proto.TerminalDimensions();
        reader.readMessage(value, proto.TerminalDimensions.deserializeBinaryFromReader);
        msg.setChangeDimensions(value);
        break;
      case 3:
        var value = new proto.Data();
        reader.readMessage(value, proto.Data.deserializeBinaryFromReader);
        msg.setInput(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GuestTerminalRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.GuestTerminalRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GuestTerminalRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GuestTerminalRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getHello();
  if (f != null) {
    writer.writeMessage(1, f, proto.GuestTerminalRequest.Hello.serializeBinaryToWriter);
  }
  f = message.getChangeDimensions();
  if (f != null) {
    writer.writeMessage(2, f, proto.TerminalDimensions.serializeBinaryToWriter);
  }
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(3, f, proto.Data.serializeBinaryToWriter);
  }
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.GuestTerminalRequest.Hello.prototype.toObject = function (opt_includeInstance) {
    return proto.GuestTerminalRequest.Hello.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.GuestTerminalRequest.Hello} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.GuestTerminalRequest.Hello.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        locator: jspb.Message.getFieldWithDefault(msg, 1, ''),
        secret: jspb.Message.getFieldWithDefault(msg, 2, ''),
        requestedDimensions:
          (f = msg.getRequestedDimensions()) && proto.TerminalDimensions.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GuestTerminalRequest.Hello}
 */
proto.GuestTerminalRequest.Hello.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GuestTerminalRequest.Hello();
  return proto.GuestTerminalRequest.Hello.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GuestTerminalRequest.Hello} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GuestTerminalRequest.Hello}
 */
proto.GuestTerminalRequest.Hello.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setLocator(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setSecret(value);
        break;
      case 3:
        var value = new proto.TerminalDimensions();
        reader.readMessage(value, proto.TerminalDimensions.deserializeBinaryFromReader);
        msg.setRequestedDimensions(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GuestTerminalRequest.Hello.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.GuestTerminalRequest.Hello.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GuestTerminalRequest.Hello} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GuestTerminalRequest.Hello.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getLocator();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getSecret();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getRequestedDimensions();
  if (f != null) {
    writer.writeMessage(3, f, proto.TerminalDimensions.serializeBinaryToWriter);
  }
};

/**
 * optional string locator = 1;
 * @return {string}
 */
proto.GuestTerminalRequest.Hello.prototype.getLocator = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.GuestTerminalRequest.Hello} returns this
 */
proto.GuestTerminalRequest.Hello.prototype.setLocator = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string secret = 2;
 * @return {string}
 */
proto.GuestTerminalRequest.Hello.prototype.getSecret = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.GuestTerminalRequest.Hello} returns this
 */
proto.GuestTerminalRequest.Hello.prototype.setSecret = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional TerminalDimensions requested_dimensions = 3;
 * @return {?proto.TerminalDimensions}
 */
proto.GuestTerminalRequest.Hello.prototype.getRequestedDimensions = function () {
  return /** @type{?proto.TerminalDimensions} */ (jspb.Message.getWrapperField(this, proto.TerminalDimensions, 3));
};

/**
 * @param {?proto.TerminalDimensions|undefined} value
 * @return {!proto.GuestTerminalRequest.Hello} returns this
 */
proto.GuestTerminalRequest.Hello.prototype.setRequestedDimensions = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.GuestTerminalRequest.Hello} returns this
 */
proto.GuestTerminalRequest.Hello.prototype.clearRequestedDimensions = function () {
  return this.setRequestedDimensions(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GuestTerminalRequest.Hello.prototype.hasRequestedDimensions = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional Hello hello = 1;
 * @return {?proto.GuestTerminalRequest.Hello}
 */
proto.GuestTerminalRequest.prototype.getHello = function () {
  return /** @type{?proto.GuestTerminalRequest.Hello} */ (
    jspb.Message.getWrapperField(this, proto.GuestTerminalRequest.Hello, 1)
  );
};

/**
 * @param {?proto.GuestTerminalRequest.Hello|undefined} value
 * @return {!proto.GuestTerminalRequest} returns this
 */
proto.GuestTerminalRequest.prototype.setHello = function (value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.GuestTerminalRequest.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.GuestTerminalRequest} returns this
 */
proto.GuestTerminalRequest.prototype.clearHello = function () {
  return this.setHello(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GuestTerminalRequest.prototype.hasHello = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional TerminalDimensions change_dimensions = 2;
 * @return {?proto.TerminalDimensions}
 */
proto.GuestTerminalRequest.prototype.getChangeDimensions = function () {
  return /** @type{?proto.TerminalDimensions} */ (jspb.Message.getWrapperField(this, proto.TerminalDimensions, 2));
};

/**
 * @param {?proto.TerminalDimensions|undefined} value
 * @return {!proto.GuestTerminalRequest} returns this
 */
proto.GuestTerminalRequest.prototype.setChangeDimensions = function (value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.GuestTerminalRequest.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.GuestTerminalRequest} returns this
 */
proto.GuestTerminalRequest.prototype.clearChangeDimensions = function () {
  return this.setChangeDimensions(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GuestTerminalRequest.prototype.hasChangeDimensions = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional Data input = 3;
 * @return {?proto.Data}
 */
proto.GuestTerminalRequest.prototype.getInput = function () {
  return /** @type{?proto.Data} */ (jspb.Message.getWrapperField(this, proto.Data, 3));
};

/**
 * @param {?proto.Data|undefined} value
 * @return {!proto.GuestTerminalRequest} returns this
 */
proto.GuestTerminalRequest.prototype.setInput = function (value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.GuestTerminalRequest.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.GuestTerminalRequest} returns this
 */
proto.GuestTerminalRequest.prototype.clearInput = function () {
  return this.setInput(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GuestTerminalRequest.prototype.hasInput = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.GuestTerminalResponse.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.GuestTerminalResponse.OperationCase = {
  OPERATION_NOT_SET: 0,
  OUTPUT: 1,
};

/**
 * @return {proto.GuestTerminalResponse.OperationCase}
 */
proto.GuestTerminalResponse.prototype.getOperationCase = function () {
  return /** @type {proto.GuestTerminalResponse.OperationCase} */ (
    jspb.Message.computeOneofCase(this, proto.GuestTerminalResponse.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.GuestTerminalResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.GuestTerminalResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.GuestTerminalResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.GuestTerminalResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        output: (f = msg.getOutput()) && proto.Data.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GuestTerminalResponse}
 */
proto.GuestTerminalResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GuestTerminalResponse();
  return proto.GuestTerminalResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GuestTerminalResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GuestTerminalResponse}
 */
proto.GuestTerminalResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.Data();
        reader.readMessage(value, proto.Data.deserializeBinaryFromReader);
        msg.setOutput(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GuestTerminalResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.GuestTerminalResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GuestTerminalResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GuestTerminalResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(1, f, proto.Data.serializeBinaryToWriter);
  }
};

/**
 * optional Data output = 1;
 * @return {?proto.Data}
 */
proto.GuestTerminalResponse.prototype.getOutput = function () {
  return /** @type{?proto.Data} */ (jspb.Message.getWrapperField(this, proto.Data, 1));
};

/**
 * @param {?proto.Data|undefined} value
 * @return {!proto.GuestTerminalResponse} returns this
 */
proto.GuestTerminalResponse.prototype.setOutput = function (value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.GuestTerminalResponse.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.GuestTerminalResponse} returns this
 */
proto.GuestTerminalResponse.prototype.clearOutput = function () {
  return this.setOutput(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GuestTerminalResponse.prototype.hasOutput = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.HostControlRequest.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.HostControlRequest.OperationCase = {
  OPERATION_NOT_SET: 0,
  HELLO: 1,
};

/**
 * @return {proto.HostControlRequest.OperationCase}
 */
proto.HostControlRequest.prototype.getOperationCase = function () {
  return /** @type {proto.HostControlRequest.OperationCase} */ (
    jspb.Message.computeOneofCase(this, proto.HostControlRequest.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.HostControlRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.HostControlRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.HostControlRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.HostControlRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        hello: (f = msg.getHello()) && proto.HostControlRequest.Hello.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HostControlRequest}
 */
proto.HostControlRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HostControlRequest();
  return proto.HostControlRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HostControlRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HostControlRequest}
 */
proto.HostControlRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.HostControlRequest.Hello();
        reader.readMessage(value, proto.HostControlRequest.Hello.deserializeBinaryFromReader);
        msg.setHello(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HostControlRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.HostControlRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HostControlRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HostControlRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getHello();
  if (f != null) {
    writer.writeMessage(1, f, proto.HostControlRequest.Hello.serializeBinaryToWriter);
  }
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.HostControlRequest.Hello.prototype.toObject = function (opt_includeInstance) {
    return proto.HostControlRequest.Hello.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.HostControlRequest.Hello} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.HostControlRequest.Hello.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        trustedSecret: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HostControlRequest.Hello}
 */
proto.HostControlRequest.Hello.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HostControlRequest.Hello();
  return proto.HostControlRequest.Hello.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HostControlRequest.Hello} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HostControlRequest.Hello}
 */
proto.HostControlRequest.Hello.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setTrustedSecret(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HostControlRequest.Hello.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.HostControlRequest.Hello.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HostControlRequest.Hello} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HostControlRequest.Hello.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getTrustedSecret();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string trusted_secret = 1;
 * @return {string}
 */
proto.HostControlRequest.Hello.prototype.getTrustedSecret = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.HostControlRequest.Hello} returns this
 */
proto.HostControlRequest.Hello.prototype.setTrustedSecret = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional Hello hello = 1;
 * @return {?proto.HostControlRequest.Hello}
 */
proto.HostControlRequest.prototype.getHello = function () {
  return /** @type{?proto.HostControlRequest.Hello} */ (
    jspb.Message.getWrapperField(this, proto.HostControlRequest.Hello, 1)
  );
};

/**
 * @param {?proto.HostControlRequest.Hello|undefined} value
 * @return {!proto.HostControlRequest} returns this
 */
proto.HostControlRequest.prototype.setHello = function (value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.HostControlRequest.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.HostControlRequest} returns this
 */
proto.HostControlRequest.prototype.clearHello = function () {
  return this.setHello(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.HostControlRequest.prototype.hasHello = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.HostControlResponse.oneofGroups_ = [[1, 2]];

/**
 * @enum {number}
 */
proto.HostControlResponse.OperationCase = {
  OPERATION_NOT_SET: 0,
  HELLO: 1,
  DATA_CHANNEL_REQUEST: 2,
};

/**
 * @return {proto.HostControlResponse.OperationCase}
 */
proto.HostControlResponse.prototype.getOperationCase = function () {
  return /** @type {proto.HostControlResponse.OperationCase} */ (
    jspb.Message.computeOneofCase(this, proto.HostControlResponse.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.HostControlResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.HostControlResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.HostControlResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.HostControlResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        hello: (f = msg.getHello()) && proto.HostControlResponse.Hello.toObject(includeInstance, f),
        dataChannelRequest:
          (f = msg.getDataChannelRequest()) &&
          proto.HostControlResponse.DataChannelRequest.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HostControlResponse}
 */
proto.HostControlResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HostControlResponse();
  return proto.HostControlResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HostControlResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HostControlResponse}
 */
proto.HostControlResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.HostControlResponse.Hello();
        reader.readMessage(value, proto.HostControlResponse.Hello.deserializeBinaryFromReader);
        msg.setHello(value);
        break;
      case 2:
        var value = new proto.HostControlResponse.DataChannelRequest();
        reader.readMessage(value, proto.HostControlResponse.DataChannelRequest.deserializeBinaryFromReader);
        msg.setDataChannelRequest(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HostControlResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.HostControlResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HostControlResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HostControlResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getHello();
  if (f != null) {
    writer.writeMessage(1, f, proto.HostControlResponse.Hello.serializeBinaryToWriter);
  }
  f = message.getDataChannelRequest();
  if (f != null) {
    writer.writeMessage(2, f, proto.HostControlResponse.DataChannelRequest.serializeBinaryToWriter);
  }
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.HostControlResponse.Hello.prototype.toObject = function (opt_includeInstance) {
    return proto.HostControlResponse.Hello.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.HostControlResponse.Hello} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.HostControlResponse.Hello.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        locator: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HostControlResponse.Hello}
 */
proto.HostControlResponse.Hello.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HostControlResponse.Hello();
  return proto.HostControlResponse.Hello.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HostControlResponse.Hello} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HostControlResponse.Hello}
 */
proto.HostControlResponse.Hello.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setLocator(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HostControlResponse.Hello.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.HostControlResponse.Hello.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HostControlResponse.Hello} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HostControlResponse.Hello.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getLocator();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string locator = 1;
 * @return {string}
 */
proto.HostControlResponse.Hello.prototype.getLocator = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.HostControlResponse.Hello} returns this
 */
proto.HostControlResponse.Hello.prototype.setLocator = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.HostControlResponse.DataChannelRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.HostControlResponse.DataChannelRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.HostControlResponse.DataChannelRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.HostControlResponse.DataChannelRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        token: jspb.Message.getFieldWithDefault(msg, 1, ''),
        requestedDimensions:
          (f = msg.getRequestedDimensions()) && proto.TerminalDimensions.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HostControlResponse.DataChannelRequest}
 */
proto.HostControlResponse.DataChannelRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HostControlResponse.DataChannelRequest();
  return proto.HostControlResponse.DataChannelRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HostControlResponse.DataChannelRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HostControlResponse.DataChannelRequest}
 */
proto.HostControlResponse.DataChannelRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setToken(value);
        break;
      case 3:
        var value = new proto.TerminalDimensions();
        reader.readMessage(value, proto.TerminalDimensions.deserializeBinaryFromReader);
        msg.setRequestedDimensions(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HostControlResponse.DataChannelRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.HostControlResponse.DataChannelRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HostControlResponse.DataChannelRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HostControlResponse.DataChannelRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getRequestedDimensions();
  if (f != null) {
    writer.writeMessage(3, f, proto.TerminalDimensions.serializeBinaryToWriter);
  }
};

/**
 * optional string token = 1;
 * @return {string}
 */
proto.HostControlResponse.DataChannelRequest.prototype.getToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.HostControlResponse.DataChannelRequest} returns this
 */
proto.HostControlResponse.DataChannelRequest.prototype.setToken = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional TerminalDimensions requested_dimensions = 3;
 * @return {?proto.TerminalDimensions}
 */
proto.HostControlResponse.DataChannelRequest.prototype.getRequestedDimensions = function () {
  return /** @type{?proto.TerminalDimensions} */ (jspb.Message.getWrapperField(this, proto.TerminalDimensions, 3));
};

/**
 * @param {?proto.TerminalDimensions|undefined} value
 * @return {!proto.HostControlResponse.DataChannelRequest} returns this
 */
proto.HostControlResponse.DataChannelRequest.prototype.setRequestedDimensions = function (value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.HostControlResponse.DataChannelRequest} returns this
 */
proto.HostControlResponse.DataChannelRequest.prototype.clearRequestedDimensions = function () {
  return this.setRequestedDimensions(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.HostControlResponse.DataChannelRequest.prototype.hasRequestedDimensions = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional Hello hello = 1;
 * @return {?proto.HostControlResponse.Hello}
 */
proto.HostControlResponse.prototype.getHello = function () {
  return /** @type{?proto.HostControlResponse.Hello} */ (
    jspb.Message.getWrapperField(this, proto.HostControlResponse.Hello, 1)
  );
};

/**
 * @param {?proto.HostControlResponse.Hello|undefined} value
 * @return {!proto.HostControlResponse} returns this
 */
proto.HostControlResponse.prototype.setHello = function (value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.HostControlResponse.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.HostControlResponse} returns this
 */
proto.HostControlResponse.prototype.clearHello = function () {
  return this.setHello(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.HostControlResponse.prototype.hasHello = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional DataChannelRequest data_channel_request = 2;
 * @return {?proto.HostControlResponse.DataChannelRequest}
 */
proto.HostControlResponse.prototype.getDataChannelRequest = function () {
  return /** @type{?proto.HostControlResponse.DataChannelRequest} */ (
    jspb.Message.getWrapperField(this, proto.HostControlResponse.DataChannelRequest, 2)
  );
};

/**
 * @param {?proto.HostControlResponse.DataChannelRequest|undefined} value
 * @return {!proto.HostControlResponse} returns this
 */
proto.HostControlResponse.prototype.setDataChannelRequest = function (value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.HostControlResponse.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.HostControlResponse} returns this
 */
proto.HostControlResponse.prototype.clearDataChannelRequest = function () {
  return this.setDataChannelRequest(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.HostControlResponse.prototype.hasDataChannelRequest = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.HostDataRequest.oneofGroups_ = [[1, 2]];

/**
 * @enum {number}
 */
proto.HostDataRequest.OperationCase = {
  OPERATION_NOT_SET: 0,
  HELLO: 1,
  OUTPUT: 2,
};

/**
 * @return {proto.HostDataRequest.OperationCase}
 */
proto.HostDataRequest.prototype.getOperationCase = function () {
  return /** @type {proto.HostDataRequest.OperationCase} */ (
    jspb.Message.computeOneofCase(this, proto.HostDataRequest.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.HostDataRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.HostDataRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.HostDataRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.HostDataRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        hello: (f = msg.getHello()) && proto.HostDataRequest.Hello.toObject(includeInstance, f),
        output: (f = msg.getOutput()) && proto.Data.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HostDataRequest}
 */
proto.HostDataRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HostDataRequest();
  return proto.HostDataRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HostDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HostDataRequest}
 */
proto.HostDataRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.HostDataRequest.Hello();
        reader.readMessage(value, proto.HostDataRequest.Hello.deserializeBinaryFromReader);
        msg.setHello(value);
        break;
      case 2:
        var value = new proto.Data();
        reader.readMessage(value, proto.Data.deserializeBinaryFromReader);
        msg.setOutput(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HostDataRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.HostDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HostDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HostDataRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getHello();
  if (f != null) {
    writer.writeMessage(1, f, proto.HostDataRequest.Hello.serializeBinaryToWriter);
  }
  f = message.getOutput();
  if (f != null) {
    writer.writeMessage(2, f, proto.Data.serializeBinaryToWriter);
  }
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.HostDataRequest.Hello.prototype.toObject = function (opt_includeInstance) {
    return proto.HostDataRequest.Hello.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.HostDataRequest.Hello} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.HostDataRequest.Hello.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        locator: jspb.Message.getFieldWithDefault(msg, 1, ''),
        token: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HostDataRequest.Hello}
 */
proto.HostDataRequest.Hello.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HostDataRequest.Hello();
  return proto.HostDataRequest.Hello.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HostDataRequest.Hello} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HostDataRequest.Hello}
 */
proto.HostDataRequest.Hello.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setLocator(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setToken(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HostDataRequest.Hello.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.HostDataRequest.Hello.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HostDataRequest.Hello} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HostDataRequest.Hello.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getLocator();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string locator = 1;
 * @return {string}
 */
proto.HostDataRequest.Hello.prototype.getLocator = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.HostDataRequest.Hello} returns this
 */
proto.HostDataRequest.Hello.prototype.setLocator = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string token = 2;
 * @return {string}
 */
proto.HostDataRequest.Hello.prototype.getToken = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.HostDataRequest.Hello} returns this
 */
proto.HostDataRequest.Hello.prototype.setToken = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional Hello hello = 1;
 * @return {?proto.HostDataRequest.Hello}
 */
proto.HostDataRequest.prototype.getHello = function () {
  return /** @type{?proto.HostDataRequest.Hello} */ (
    jspb.Message.getWrapperField(this, proto.HostDataRequest.Hello, 1)
  );
};

/**
 * @param {?proto.HostDataRequest.Hello|undefined} value
 * @return {!proto.HostDataRequest} returns this
 */
proto.HostDataRequest.prototype.setHello = function (value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.HostDataRequest.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.HostDataRequest} returns this
 */
proto.HostDataRequest.prototype.clearHello = function () {
  return this.setHello(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.HostDataRequest.prototype.hasHello = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional Data output = 2;
 * @return {?proto.Data}
 */
proto.HostDataRequest.prototype.getOutput = function () {
  return /** @type{?proto.Data} */ (jspb.Message.getWrapperField(this, proto.Data, 2));
};

/**
 * @param {?proto.Data|undefined} value
 * @return {!proto.HostDataRequest} returns this
 */
proto.HostDataRequest.prototype.setOutput = function (value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.HostDataRequest.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.HostDataRequest} returns this
 */
proto.HostDataRequest.prototype.clearOutput = function () {
  return this.setOutput(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.HostDataRequest.prototype.hasOutput = function () {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.HostDataResponse.oneofGroups_ = [[1, 2]];

/**
 * @enum {number}
 */
proto.HostDataResponse.OperationCase = {
  OPERATION_NOT_SET: 0,
  CHANGE_DIMENSIONS: 1,
  INPUT: 2,
};

/**
 * @return {proto.HostDataResponse.OperationCase}
 */
proto.HostDataResponse.prototype.getOperationCase = function () {
  return /** @type {proto.HostDataResponse.OperationCase} */ (
    jspb.Message.computeOneofCase(this, proto.HostDataResponse.oneofGroups_[0])
  );
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.HostDataResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.HostDataResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.HostDataResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.HostDataResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        changeDimensions: (f = msg.getChangeDimensions()) && proto.TerminalDimensions.toObject(includeInstance, f),
        input: (f = msg.getInput()) && proto.Data.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.HostDataResponse}
 */
proto.HostDataResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.HostDataResponse();
  return proto.HostDataResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.HostDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.HostDataResponse}
 */
proto.HostDataResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.TerminalDimensions();
        reader.readMessage(value, proto.TerminalDimensions.deserializeBinaryFromReader);
        msg.setChangeDimensions(value);
        break;
      case 2:
        var value = new proto.Data();
        reader.readMessage(value, proto.Data.deserializeBinaryFromReader);
        msg.setInput(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.HostDataResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.HostDataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.HostDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.HostDataResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getChangeDimensions();
  if (f != null) {
    writer.writeMessage(1, f, proto.TerminalDimensions.serializeBinaryToWriter);
  }
  f = message.getInput();
  if (f != null) {
    writer.writeMessage(2, f, proto.Data.serializeBinaryToWriter);
  }
};

/**
 * optional TerminalDimensions change_dimensions = 1;
 * @return {?proto.TerminalDimensions}
 */
proto.HostDataResponse.prototype.getChangeDimensions = function () {
  return /** @type{?proto.TerminalDimensions} */ (jspb.Message.getWrapperField(this, proto.TerminalDimensions, 1));
};

/**
 * @param {?proto.TerminalDimensions|undefined} value
 * @return {!proto.HostDataResponse} returns this
 */
proto.HostDataResponse.prototype.setChangeDimensions = function (value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.HostDataResponse.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.HostDataResponse} returns this
 */
proto.HostDataResponse.prototype.clearChangeDimensions = function () {
  return this.setChangeDimensions(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.HostDataResponse.prototype.hasChangeDimensions = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional Data input = 2;
 * @return {?proto.Data}
 */
proto.HostDataResponse.prototype.getInput = function () {
  return /** @type{?proto.Data} */ (jspb.Message.getWrapperField(this, proto.Data, 2));
};

/**
 * @param {?proto.Data|undefined} value
 * @return {!proto.HostDataResponse} returns this
 */
proto.HostDataResponse.prototype.setInput = function (value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.HostDataResponse.oneofGroups_[0], value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.HostDataResponse} returns this
 */
proto.HostDataResponse.prototype.clearInput = function () {
  return this.setInput(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.HostDataResponse.prototype.hasInput = function () {
  return jspb.Message.getField(this, 2) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.TerminalDimensions.prototype.toObject = function (opt_includeInstance) {
    return proto.TerminalDimensions.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.TerminalDimensions} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.TerminalDimensions.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        widthColumns: jspb.Message.getFieldWithDefault(msg, 1, 0),
        heightRows: jspb.Message.getFieldWithDefault(msg, 2, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TerminalDimensions}
 */
proto.TerminalDimensions.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TerminalDimensions();
  return proto.TerminalDimensions.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TerminalDimensions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TerminalDimensions}
 */
proto.TerminalDimensions.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setWidthColumns(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setHeightRows(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TerminalDimensions.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.TerminalDimensions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TerminalDimensions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TerminalDimensions.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getWidthColumns();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
  f = message.getHeightRows();
  if (f !== 0) {
    writer.writeUint32(2, f);
  }
};

/**
 * optional uint32 width_columns = 1;
 * @return {number}
 */
proto.TerminalDimensions.prototype.getWidthColumns = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.TerminalDimensions} returns this
 */
proto.TerminalDimensions.prototype.setWidthColumns = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional uint32 height_rows = 2;
 * @return {number}
 */
proto.TerminalDimensions.prototype.getHeightRows = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {number} value
 * @return {!proto.TerminalDimensions} returns this
 */
proto.TerminalDimensions.prototype.setHeightRows = function (value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Data.prototype.toObject = function (opt_includeInstance) {
    return proto.Data.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Data} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Data.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        data: msg.getData_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data}
 */
proto.Data.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data();
  return proto.Data.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data}
 */
proto.Data.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setData(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Data.prototype.getData = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.Data.prototype.getData_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getData()));
};

/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.Data.prototype.getData_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getData()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Data} returns this
 */
proto.Data.prototype.setData = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Error.prototype.toObject = function (opt_includeInstance) {
    return proto.Error.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Error} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Error.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        message: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Error}
 */
proto.Error.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Error();
  return proto.Error.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Error}
 */
proto.Error.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setMessage(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Error.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Error.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string message = 1;
 * @return {string}
 */
proto.Error.prototype.getMessage = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.Error} returns this
 */
proto.Error.prototype.setMessage = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

goog.object.extend(exports, proto);
